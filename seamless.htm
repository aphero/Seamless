<!DOCTYPE HTML>
<html>
	<head>
		<style type="text/css">
			body { background-color:#dedddd }
			canvas { background-color:#aaaaaa; padding:20px }
			#colorInfo { width:300px; background-color:white; padding:20px }
			#colorInfo2 { width:300px; background-color:white; padding:20px }
		</style>
	</head>
	<body>
		<canvas id="iLikeCookies" width="300" height="300">Your browser kinda sucks.  Can't even draw a canvas.  For shame.</canvas>
		<div id="header"></div>
		<div id="result"></div>
		<div id="colorInfo"></div>
		<div id="colorInfo2"></div>
		<input type="file" id="gimmefile" />
		
		<script>
			
			// String for storing Read() data, not used in final.		
			// pixelData = '';
			
			// Row variables
			// Two sets to store each opposing pixel and then Diff to store the difference between them.
			function initialize() {
				r1 = 0;
				g1 = 0;
				b1 = 0;
				a1 = 0;
				r2 = 0;
				g2 = 0;
				b2 = 0;
				a2 = 0;
				rDiff = 0;
				gDiff = 0;
				bDiff = 0;
				aDiff = 0;
				rowDiff = 0;
			
				// Column variables
			
				cr1 = 0;
				cg1 = 0;
				cb1 = 0;
				ca1 = 0;
				cr2 = 0;
				cg2 = 0;
				cb2 = 0;
				ca2 = 0;
				crDiff = 0;
				cgDiff = 0;
				cbDiff = 0;
				caDiff = 0;
				colDiff = 0;
			}	
					
			// Function to read all pixels and build into string of RGBa values.
			// Used for testing to see if pixels could be read fully.
			
			var read = function() {
				// var x = 0, y = 0;
				// loop through each row
				for(var y = 0; y < img.height; y++) {
					// loop through each column
					for(var x = 0; x < img.width; x++) {
						// grabbing individual pixel data
						var red = pixels[((canvas.width * y) + x) * 4];
						var green = pixels[((canvas.width * y) + x) * 4 + 1];
						var blue = pixels[((canvas.width * y) + x) * 4 + 2];
						var alpha = pixels[((canvas.width * y) + x) * 4 + 3];
						// adding current pixel data to string
						pixelData += "RGBa(" + red + ", " + green + ", " + blue + ", " + alpha + ") \n";
					}
				}
			};
			
			// Row comparison function
			
			var compareRow = function(img) {
				// Get and compare each pixel in the top row to their counterpart in the bottom row
				for(var i = 0; i < img.width * 4; i += 4) {
					// Grab pixel in row one
					r1 = pixels[i];
					g1 = pixels[i + 1];
					b1 = pixels[i + 2];
					a1 = pixels[i + 3];
					// Grab pixel in row 300
					r2 = pixels[358800 + i];
					g2 = pixels[358800 + i + 1];
					b2 = pixels[358800 + i + 2];
					a2 = pixels[358800 + i + 3];
					// Measure the difference between pixels
					rDiff = Math.abs(r1 - r2);
					gDiff = Math.abs(g1 - g2);
					bDiff = Math.abs(b1 - b2);
					// Add up total difference between pixels
					rowDiff += rDiff + gDiff + bDiff;
					
				}
				// Convert total difference in pixels into a percentage and displays the result on the webpage
				var rowOutput = ((Math.abs((rowDiff/1200)-255)/255)*100);
				document.getElementById("colorInfo").innerHTML = rowOutput.toFixed(0) + "% top and bottom row match.";
			};
			
			var compareCol = function() {
				// Get and compare each pixel in the left column to their counterpart in the right column
				for(var c = 0; c < 360000; c += 1200) {
					// Grab pixel in column one 
					cr1 = pixels[c];
					cg1 = pixels[c + 1];
					cb1 = pixels[c + 2];
					ca1 = pixels[c + 3];
					// Grab pixel in  column 300
					cr2 = pixels[c + 1196];
					cg2 = pixels[c + 1197];
					cb2 = pixels[c + 1198];
					ca2 = pixels[c + 1199];
					// Measure the difference between pixels
					crDiff = Math.abs(cr1 - cr2);
					cgDiff = Math.abs(cg1 - cg2);
					cbDiff = Math.abs(cb1 - cb2);
					// Add up total difference between pixels
					colDiff += crDiff + cgDiff + cbDiff;				
				}
				// Convert total difference in pixels into a percentage and displays the result on the webpage
				var colOutput = ((Math.abs((colDiff/900)-255)/255)*100);
				document.getElementById("colorInfo2").innerHTML = colOutput.toFixed(0) + "% left and right column match.";
			};
			
			// Here's where we setup the file upload.  
			
			var URL = window.webkitURL || window.URL;

			window.onload = function() {
			    var input = document.getElementById('gimmefile');
 				input.addEventListener('change', handleFiles, false);
			}

			function handleFiles(e) {
 				var canvas = document.getElementById('iLikeCookies')
 				var ctx = canvas.getContext('2d');
 				var url = URL.createObjectURL(e.target.files[0]);
 				var img = new Image();
				img.width = canvas.width;
				img.height = canvas.height;
				
				// img.onload function draws the image to the canvas, grabs the data and runs the other functions to compare pixels.
				
 				img.onload = function() {
 					ctx.drawImage(img, 0, 0, img.width, img.height);  
					imgData = ctx.getImageData(0, 0, img.width, img.height);
					pixels = imgData.data;
					initialize(); 
 					compareRow(img);
 					compareCol(); 
 				}
 				img.src = url;
 				
			}
			
			// Random author notes that don't really mean anything.
			// failtest.jpg | pattern1.png | pattern2.jpg | blacksquare.jpg
			// maybe use URL parameters to supply the location of the file?
			// ctx.fillStyle = "rgb(123,40,170)"
			// ctx.fillRect(0,0,300,300)
			
			
		</script>
	</body>
</html>